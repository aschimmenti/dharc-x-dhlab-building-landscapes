name: Deploy to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Install dependencies
        run: |
          npm ci
          # Ensure Tailwind CSS and PostCSS are installed
          npm install -D tailwindcss postcss autoprefixer
          # Ensure Font Awesome is installed
          npm install font-awesome
      - name: Verify CSS configuration
        run: |
          # Check if tailwind config exists, if not create it
          if [ ! -f tailwind.config.mjs ]; then
            npx tailwindcss init -p
          fi
          # Create .nojekyll file to prevent Jekyll processing
          touch public/.nojekyll
          # Also create .nojekyll in out directory after build
          mkdir -p out
          touch out/.nojekyll
      - name: Update next.config.mjs for proper image paths
        run: |
          # Add proper base path if needed
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          if [[ "$GITHUB_REPOSITORY_OWNER" != *".github.io"* && "$REPO_NAME" != *".github.io"* ]]; then
            # Only set basePath if it's not already set
            if ! grep -q "basePath:" next.config.mjs; then
              sed -i "s|// basePath: '/repo-name',|basePath: '/$REPO_NAME',|g" next.config.mjs
            fi
            echo "Set basePath to /$REPO_NAME"
            cat next.config.mjs
          fi
      - name: Build with Next.js
        run: |
          # Force a full rebuild with clean cache
          npm run build -- --no-cache
        env:
          # Set NODE_ENV to production to ensure proper CSS processing
          NODE_ENV: production
      - name: Copy image assets if needed
        run: |
          # Ensure images directory exists in output
          if [ -d "public/images" ]; then
            mkdir -p out/images
            cp -r public/images/* out/images/ || echo "No images to copy"
          fi
          # List the output directory to verify assets
          echo "Output directory contents:"
          ls -la ./out
          echo "Image directory contents (if exists):"
          ls -la ./out/images || echo "No images directory found"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4